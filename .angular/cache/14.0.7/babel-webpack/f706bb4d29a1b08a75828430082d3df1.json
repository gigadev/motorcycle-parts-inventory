{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nimport { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PartsService } from '../../services/parts.service';\nlet PartEditComponent = class PartEditComponent {\n  constructor(fb, partsService, route, router) {\n    this.fb = fb;\n    this.partsService = partsService;\n    this.route = route;\n    this.router = router;\n    this.partForm = this.fb.group({\n      make: ['', Validators.required],\n      model: ['', Validators.required],\n      imageUrl: ['', Validators.required],\n      description: ['']\n    });\n  }\n\n  ngOnInit() {\n    this.partId = +this.route.snapshot.paramMap.get('id');\n\n    if (this.partId) {\n      this.loadPart();\n    }\n  }\n\n  loadPart() {\n    this.partsService.getPartById(this.partId).subscribe(part => {\n      this.partForm.patchValue(part);\n    });\n  }\n\n  onSubmit() {\n    if (this.partForm.valid) {\n      const part = Object.assign({\n        id: this.partId\n      }, this.partForm.value);\n\n      if (this.partId) {\n        this.partsService.updatePart(part).subscribe(() => {\n          this.router.navigate(['/parts']);\n        });\n      } else {\n        this.partsService.addPart(part).subscribe(() => {\n          this.router.navigate(['/parts']);\n        });\n      }\n    }\n  }\n\n  onCancel() {\n    this.router.navigate(['/parts']);\n  }\n\n};\nPartEditComponent = __decorate([Component({\n  selector: 'app-part-edit',\n  templateUrl: './part-edit.component.html',\n  styleUrls: ['./part-edit.component.css']\n}), __metadata(\"design:paramtypes\", [FormBuilder, PartsService, ActivatedRoute, Router])], PartEditComponent);\nexport { PartEditComponent };","map":null,"metadata":{},"sourceType":"module"}